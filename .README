### MySQL Script
-- MySQL Script generated by MySQL Workbench
-- Sun Oct  5 00:24:29 2025
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';

-- -----------------------------------------------------
-- Schema mydb
-- -----------------------------------------------------
DROP DATABASE IF EXISTS `mypillora`;
CREATE DATABASE IF NOT EXISTS `mypillora` DEFAULT CHARACTER SET utf8 ;
USE `mypillora` ;
-- -----------------------------------------------------
-- Table `userInfo`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `userInfo` ;

CREATE TABLE IF NOT EXISTS `userInfo` (
  `userID` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `firstName` VARCHAR(45) NOT NULL,
  `lastName` VARCHAR(45) NOT NULL,
  `personaType` ENUM('patient', 'carer') NOT NULL,
  PRIMARY KEY (`userID`),
  UNIQUE INDEX `userID_UNIQUE` (`userID` ASC) VISIBLE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `loginInfo`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `loginInfo` ;

CREATE TABLE IF NOT EXISTS `loginInfo` (
  `loginID` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `password` VARCHAR(45) NOT NULL,
  `email` VARCHAR(45) NOT NULL,
  `fk_loginInfo_userID` INT UNSIGNED NOT NULL,
  PRIMARY KEY (`loginID`),
  UNIQUE INDEX `loginID_UNIQUE` (`loginID` ASC) VISIBLE,
  INDEX `fk_loginInfo_userID_idx` (`fk_loginInfo_userID` ASC) VISIBLE,
  CONSTRAINT `fk_loginInfo_userID`
    FOREIGN KEY (`fk_loginInfo_userID`)
    REFERENCES `userInfo` (`userID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `weeklySettings`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `weeklySettings` ;

CREATE TABLE IF NOT EXISTS `weeklySettings` (
  `frequencyID` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `monday` TINYINT(1) UNSIGNED NULL,
  `tuesday` TINYINT(1) UNSIGNED NULL,
  `wednesday` TINYINT(1) UNSIGNED NULL,
  `thursday` TINYINT(1) UNSIGNED NULL,
  `friday` TINYINT(1) UNSIGNED NULL,
  `saturday` TINYINT(1) UNSIGNED NULL,
  `sunday` TINYINT(1) UNSIGNED NULL,
  PRIMARY KEY (`frequencyID`),
  UNIQUE INDEX `frequencyID_UNIQUE` (`frequencyID` ASC) VISIBLE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `dosage`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `dosage` ;

CREATE TABLE IF NOT EXISTS `dosage` (
  `dosageID` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `numberOfPills` INT UNSIGNED NOT NULL,
  `milligrams` FLOAT UNSIGNED NOT NULL,
  PRIMARY KEY (`dosageID`),
  UNIQUE INDEX `dosageID_UNIQUE` (`dosageID` ASC) VISIBLE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `patientPills`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `patientPills` ;

CREATE TABLE IF NOT EXISTS `patientPills` (
  `pillID` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `beforeOrAfterMeal` ENUM('before', 'after') NOT NULL,
  `pillName` VARCHAR(45) NOT NULL,
  `fk_patientPills_dosageID` INT UNSIGNED NOT NULL,
  `fk_patientPillLog_userID` INT UNSIGNED NOT NULL,
  `fk_patientPIllLog_frequencyID` INT UNSIGNED NOT NULL,
  PRIMARY KEY (`pillID`),
  UNIQUE INDEX `pillID_UNIQUE` (`pillID` ASC) VISIBLE,
  INDEX `fk_patientPIlls_weeklyID_idx` (`fk_patientPIllLog_frequencyID` ASC) VISIBLE,
  INDEX `fk_patientPills_userID_idx` (`fk_patientPillLog_userID` ASC) VISIBLE,
  INDEX `fk_patientPIlls_dosageID_idx` (`fk_patientPills_dosageID` ASC) VISIBLE,
  CONSTRAINT `fk_patientPills_userID`
    FOREIGN KEY (`fk_patientPillLog_userID`)
    REFERENCES `userInfo` (`userID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_patientPIlls_frequencyID`
    FOREIGN KEY (`fk_patientPIllLog_frequencyID`)
    REFERENCES `weeklySettings` (`frequencyID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_patientPIlls_dosageID`
    FOREIGN KEY (`fk_patientPills_dosageID`)
    REFERENCES `dosage` (`dosageID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `patientPillLog`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `patientPillLog` ;

CREATE TABLE IF NOT EXISTS `patientPillLog` (
  `logID` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `timestamp` DATETIME NOT NULL,
  `fk_patientPillLog_userID` INT UNSIGNED NOT NULL,
  `fk_patientPillLog_pillID` INT UNSIGNED NOT NULL,
  PRIMARY KEY (`logID`),
  UNIQUE INDEX `logID_UNIQUE` (`logID` ASC) VISIBLE,
  INDEX `fk_patientPillLog_userID_idx` (`fk_patientPillLog_userID` ASC) VISIBLE,
  INDEX `fk_patientPillLog_pillID_idx` (`fk_patientPillLog_pillID` ASC) VISIBLE,
  CONSTRAINT `fk_patientPillLog_userID`
    FOREIGN KEY (`fk_patientPillLog_userID`)
    REFERENCES `userInfo` (`userID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_patientPillLog_pillID`
    FOREIGN KEY (`fk_patientPillLog_pillID`)
    REFERENCES `patientPills` (`pillID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `reminder`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `reminder` ;

CREATE TABLE IF NOT EXISTS `reminder` (
  `reminderID` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `fk_reminder_userID` INT UNSIGNED NOT NULL,
  `fk_reminder_dosageID` INT UNSIGNED NOT NULL,
  `messageStructure` VARCHAR(45) NOT NULL,
  `status` INT UNSIGNED NOT NULL,
  `fk_reminder_pillID` INT UNSIGNED NOT NULL,
  PRIMARY KEY (`reminderID`),
  UNIQUE INDEX `reminderID_UNIQUE` (`reminderID` ASC) VISIBLE,
  INDEX `fk_reminder_userID_idx` (`fk_reminder_userID` ASC) VISIBLE,
  INDEX `fk_reminder_dosageID_idx` (`fk_reminder_dosageID` ASC) VISIBLE,
  INDEX `fk_reminder_pilliD_idx` (`fk_reminder_pillID` ASC) VISIBLE,
  CONSTRAINT `fk_reminder_userID`
    FOREIGN KEY (`fk_reminder_userID`)
    REFERENCES `userInfo` (`userID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_reminder_dosageID`
    FOREIGN KEY (`fk_reminder_dosageID`)
    REFERENCES `dosage` (`dosageID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_reminder_pilliD`
    FOREIGN KEY (`fk_reminder_pillID`)
    REFERENCES `patientPills` (`pillID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;

### SQL test script
USE mypillora;

-- ==============================================
-- TESTING DATA INSERTS
-- ==============================================

-- 1Ô∏è‚É£ Insert users into userInfo
INSERT INTO userInfo (firstName, lastName, personaType)
VALUES 
('Alice', 'Johnson', 'patient'),
('Bob', 'Smith', 'carer');

-- 2Ô∏è‚É£ Insert login information (must reference valid userIDs)
INSERT INTO loginInfo (password, email, fk_loginInfo_userID)
VALUES 
('passAlice123', 'alice@example.com', 1),
('passBob123', 'bob@example.com', 2);

-- 3Ô∏è‚É£ Insert weekly settings (example medication schedules)
INSERT INTO weeklySettings (monday, tuesday, wednesday, thursday, friday, saturday, sunday)
VALUES 
(1, 1, 1, 1, 1, 0, 0),  -- Weekday schedule
(0, 0, 0, 0, 0, 1, 1);  -- Weekend schedule

-- 4Ô∏è‚É£ Insert dosage information
INSERT INTO dosage (numberOfPills, milligrams)
VALUES 
(1, 100.0),
(2, 50.0);

-- 5Ô∏è‚É£ Insert patient pills (depends on userInfo, weeklySettings, dosage)
INSERT INTO patientPills (beforeOrAfterMeal, pillName, fk_patientPills_dosageID, fk_patientPillLog_userID, fk_patientPIllLog_frequencyID)
VALUES 
('before', 'Aspirin', 1, 1, 1),
('after', 'VitaminD', 2, 1, 2);

-- 6Ô∏è‚É£ Insert pill log (depends on userInfo + patientPills)
INSERT INTO patientPillLog (timestamp, fk_patientPillLog_userID, fk_patientPillLog_pillID)
VALUES 
(NOW(), 1, 1),
(NOW(), 1, 2);

-- 7Ô∏è‚É£ Insert reminder (depends on userInfo + dosage + patientPills)
INSERT INTO reminder (fk_reminder_userID, fk_reminder_dosageID, messageStructure, status, fk_reminder_pillID)
VALUES 
(1, 1, 'Take Aspirin before breakfast', 1, 1),
(1, 2, 'Take Vitamin D after lunch', 1, 2);

-- ==============================================
-- VERIFY DATA INTEGRITY THROUGH JOINED QUERIES
-- ==============================================

-- üß© Check user, their login, and pills
SELECT 
    u.userID, u.firstName, u.lastName, u.personaType,
    l.email, p.pillName, d.numberOfPills, d.milligrams
FROM userInfo u
JOIN loginInfo l ON u.userID = l.fk_loginInfo_userID
JOIN patientPills p ON u.userID = p.fk_patientPillLog_userID
JOIN dosage d ON p.fk_patientPills_dosageID = d.dosageID;

-- üß© Check pill schedules (weeklySettings link)
SELECT 
    p.pillName, w.monday, w.tuesday, w.wednesday, w.thursday, w.friday, w.saturday, w.sunday
FROM patientPills p
JOIN weeklySettings w ON p.fk_patientPIllLog_frequencyID = w.frequencyID;

-- üß© Check reminders with user and dosage info
SELECT 
    r.reminderID, u.firstName, p.pillName, d.milligrams, r.messageStructure
FROM reminder r
JOIN userInfo u ON r.fk_reminder_userID = u.userID
JOIN dosage d ON r.fk_reminder_dosageID = d.dosageID
JOIN patientPills p ON r.fk_reminder_pillID = p.pillID;

-- ==============================================
-- TEST FOREIGN KEY VIOLATIONS
-- ==============================================

-- üö´ Should FAIL: referencing non-existent user (userID = 999)
INSERT INTO loginInfo (password, email, fk_loginInfo_userID)
VALUES ('badPassword', 'invalid@example.com', 999);

-- üö´ Should FAIL: inserting a pill with invalid dosageID
INSERT INTO patientPills (beforeOrAfterMeal, pillName, fk_patientPills_dosageID, fk_patientPillLog_userID, fk_patientPIllLog_frequencyID)
VALUES ('before', 'InvalidPill', 999, 1, 1);

-- üö´ Should FAIL: inserting a reminder for a non-existent pill
INSERT INTO reminder (fk_reminder_userID, fk_reminder_dosageID, messageStructure, status, fk_reminder_pillID)
VALUES (1, 1, 'Invalid pill reference', 0, 999);



